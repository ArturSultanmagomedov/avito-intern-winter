// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddFunds mocks base method.
func (m *MockUser) AddFunds(userId int, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFunds", userId, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFunds indicates an expected call of AddFunds.
func (mr *MockUserMockRecorder) AddFunds(userId, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunds", reflect.TypeOf((*MockUser)(nil).AddFunds), userId, sum)
}

// FundsTransfer mocks base method.
func (m *MockUser) FundsTransfer(senderId, receiverId int, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundsTransfer", senderId, receiverId, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// FundsTransfer indicates an expected call of FundsTransfer.
func (mr *MockUserMockRecorder) FundsTransfer(senderId, receiverId, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundsTransfer", reflect.TypeOf((*MockUser)(nil).FundsTransfer), senderId, receiverId, sum)
}

// GetBalance mocks base method.
func (m *MockUser) GetBalance(userId int) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userId)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserMockRecorder) GetBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUser)(nil).GetBalance), userId)
}

// WriteOffFunds mocks base method.
func (m *MockUser) WriteOffFunds(userId int, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOffFunds", userId, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOffFunds indicates an expected call of WriteOffFunds.
func (mr *MockUserMockRecorder) WriteOffFunds(userId, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOffFunds", reflect.TypeOf((*MockUser)(nil).WriteOffFunds), userId, sum)
}
